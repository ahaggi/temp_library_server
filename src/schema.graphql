### This file was generated by Nexus Schema
### Do not make changes to this file directly


input _AuthorCreateInput {
  about: String
  booksToAuthors: _BooksToAuthorsCreateManyWithoutAuthorInput
  email: String
  imgUri: String
  name: String
}

input _AuthorCreateOneWithoutBooksToAuthorsInput {
  connect: _AuthorWhereUniqueInput
}

input _AuthorUpdateInput {
  about: String
  booksToAuthors: _BooksToAuthorsUpdateManyWithoutAuthorInput
  email: String
  imgUri: String
  name: String
}

input _AuthorUpdateOneWithoutBooksToAuthorsInput {
  connect: _AuthorWhereUniqueInput
  delete: Boolean
  disconnect: Boolean
  update: _AuthorUpdateWithoutBooksToAuthorsDataInput
  upsert: _AuthorUpsertWithoutBooksToAuthorsInput
}

input _AuthorUpdateWithoutBooksToAuthorsDataInput {
  about: String
  email: String
  imgUri: String
  name: String
}

input _AuthorUpsertWithoutBooksToAuthorsInput {
  update: _AuthorUpdateWithoutBooksToAuthorsDataInput
}

input _AuthorWhereInput {
  about: String
  booksToAuthors: _BooksToAuthorsListRelationFilter
  email: String
  id: String
  imgUri: String
  name: String
  NOT: [_AuthorWhereInput!]
  OR: [_AuthorWhereInput!]
}

input _AuthorWhereUniqueInput {
  email: String
  id: String
}

input _BookCreateInput {
  booksToAuthors: BooksToAuthorsCreateManyWithoutBookInput
  booksToReaders: _BooksToReadersCreateManyWithoutBookInput
  chapters: Int!
  description: String!
  imgUri: String
  isbn: String!
  pages: Int!
  price: Float!
  storage: _StorageCreateOneWithoutBookInput
  title: String!
}

input _BookCreateOneWithoutBooksToAuthorsInput {
  connect: _BookWhereUniqueInput
}

input _BookCreateOneWithoutBooksToReadersInput {
  connect: _BookWhereUniqueInput
}

input _BooksToAuthorsCreateManyWithoutAuthorInput {
  create: [_BooksToAuthorsCreateWithoutAuthorInput!]
}

input _BooksToAuthorsCreateWithoutAuthorInput {
  book: _BookCreateOneWithoutBooksToAuthorsInput
}

input _BooksToAuthorsCreateWithoutBookInput {
  author: _AuthorCreateOneWithoutBooksToAuthorsInput
}

input _BooksToAuthorsListRelationFilter {
  every: _BooksToAuthorsWhereInput
  none: _BooksToAuthorsWhereInput
  some: _BooksToAuthorsWhereInput
}

input _BooksToAuthorsScalarWhereInput {
  AND: [_BooksToAuthorsScalarWhereInput!]
  authorId: String
  bookId: String
  id: String
  NOT: [_BooksToAuthorsScalarWhereInput!]
  OR: [_BooksToAuthorsScalarWhereInput!]
}

input _BooksToAuthorsUpdateManyDataInput {
  id: String
}

input _BooksToAuthorsUpdateManyWithoutAuthorInput {
  create: [_BooksToAuthorsCreateWithoutAuthorInput!]
  delete: [_BooksToAuthorsWhereUniqueInput!]
  deleteMany: [_BooksToAuthorsScalarWhereInput!]
  disconnect: [_BooksToAuthorsWhereUniqueInput!]
  set: [_BooksToAuthorsWhereUniqueInput!]
  update: [_BooksToAuthorsUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [_BooksToAuthorsUpdateManyWithWhereNestedInput!]
  upsert: [_BooksToAuthorsUpsertWithWhereUniqueWithoutAuthorInput!]
}

input _BooksToAuthorsUpdateManyWithoutBookInput {
  create: [_BooksToAuthorsCreateWithoutBookInput!]
  delete: [_BooksToAuthorsWhereUniqueInput!]
  deleteMany: [_BooksToAuthorsScalarWhereInput!]
  disconnect: [_BooksToAuthorsWhereUniqueInput!]
  set: [_BooksToAuthorsWhereUniqueInput!]
  update: [_BooksToAuthorsUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [_BooksToAuthorsUpdateManyWithWhereNestedInput!]
  upsert: [_BooksToAuthorsUpsertWithWhereUniqueWithoutBookInput!]
}

input _BooksToAuthorsUpdateManyWithWhereNestedInput {
  data: _BooksToAuthorsUpdateManyDataInput
  where: _BooksToAuthorsScalarWhereInput
}

input _BooksToAuthorsUpdateWithoutAuthorDataInput {
  book: _BookUpdateOneWithoutBooksToAuthorsInput
}

input _BooksToAuthorsUpdateWithoutBookDataInput {
  author: _AuthorUpdateOneWithoutBooksToAuthorsInput
}

input _BooksToAuthorsUpdateWithWhereUniqueWithoutAuthorInput {
  data: _BooksToAuthorsUpdateWithoutAuthorDataInput
  where: _BooksToAuthorsWhereUniqueInput
}

input _BooksToAuthorsUpdateWithWhereUniqueWithoutBookInput {
  data: _BooksToAuthorsUpdateWithoutBookDataInput
  where: _BooksToAuthorsWhereUniqueInput
}

input _BooksToAuthorsUpsertWithWhereUniqueWithoutAuthorInput {
  create: _BooksToAuthorsCreateWithoutAuthorInput
  update: _BooksToAuthorsUpdateWithoutAuthorDataInput
  where: _BooksToAuthorsWhereUniqueInput
}

input _BooksToAuthorsUpsertWithWhereUniqueWithoutBookInput {
  create: _BooksToAuthorsCreateWithoutBookInput
  update: _BooksToAuthorsUpdateWithoutBookDataInput
  where: _BooksToAuthorsWhereUniqueInput
}

input _BooksToAuthorsWhereInput {
  author: _AuthorWhereInput
  book: _BookWhereInput
  id: String
  NOT: [_BooksToAuthorsWhereInput!]
  OR: [_BooksToAuthorsWhereInput!]
}

input _BooksToAuthorsWhereUniqueInput {
  id: String
}

input _BooksToReadersCreateManyWithoutBookInput {
  create: [_BooksToReadersCreateWithoutBookInput!]
}

input _BooksToReadersCreateManyWithoutReaderInput {
  create: [_BooksToReadersCreateWithoutReaderInput!]
}

input _BooksToReadersCreateWithoutBookInput {
  borrowDate: String
  reader: _ReaderCreateOneWithoutBooksToReadersInput
  returnDate: String
  returned: Boolean
}

input _BooksToReadersCreateWithoutReaderInput {
  book: _BookCreateOneWithoutBooksToReadersInput
  borrowDate: String
  returnDate: String
  returned: Boolean
}

input _BooksToReadersListRelationFilter {
  every: _BooksToReadersWhereInput
  none: _BooksToReadersWhereInput
  some: _BooksToReadersWhereInput
}

input _BooksToReadersScalarWhereInput {
  AND: [_BooksToReadersScalarWhereInput!]
  bookId: String
  borrowDate: String
  id: String
  NOT: [_BooksToReadersScalarWhereInput!]
  OR: [_BooksToReadersScalarWhereInput!]
  readerId: String
  returnDate: String
  returned: Boolean
}

input _BooksToReadersUpdateManyDataInput {
  borrowDate: String
  returnDate: String
  returned: Boolean
}

input _BooksToReadersUpdateManyWithoutBookInput {
  create: [_BooksToReadersCreateWithoutBookInput!]
  delete: [_BooksToReadersWhereUniqueInput!]
  deleteMany: [_BooksToReadersScalarWhereInput!]
  disconnect: [_BooksToReadersWhereUniqueInput!]
  set: [_BooksToReadersWhereUniqueInput!]
  update: [_BooksToReadersUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [_BooksToReadersUpdateManyWithWhereNestedInput!]
  upsert: [_BooksToReadersUpsertWithWhereUniqueWithoutBookInput!]
}

input _BooksToReadersUpdateManyWithoutReaderInput {
  create: [_BooksToReadersCreateWithoutReaderInput!]
  delete: [_BooksToReadersWhereUniqueInput!]
  deleteMany: [_BooksToReadersScalarWhereInput!]
  disconnect: [_BooksToReadersWhereUniqueInput!]
  set: [_BooksToReadersWhereUniqueInput!]
  update: [_BooksToReadersUpdateWithWhereUniqueWithoutReaderInput!]
  updateMany: [_BooksToReadersUpdateManyWithWhereNestedInput!]
  upsert: [_BooksToReadersUpsertWithWhereUniqueWithoutReaderInput!]
}

input _BooksToReadersUpdateManyWithWhereNestedInput {
  data: _BooksToReadersUpdateManyDataInput
  where: _BooksToReadersScalarWhereInput
}

input _BooksToReadersUpdateWithoutBookDataInput {
  borrowDate: String
  reader: _ReaderUpdateOneWithoutBooksToReadersInput
  returnDate: String
  returned: Boolean
}

input _BooksToReadersUpdateWithoutReaderDataInput {
  book: _BookUpdateOneWithoutBooksToReadersInput
  borrowDate: String
  returnDate: String
  returned: Boolean
}

input _BooksToReadersUpdateWithWhereUniqueWithoutBookInput {
  data: _BooksToReadersUpdateWithoutBookDataInput
  where: _BooksToReadersWhereUniqueInput
}

input _BooksToReadersUpdateWithWhereUniqueWithoutReaderInput {
  data: _BooksToReadersUpdateWithoutReaderDataInput
  where: _BooksToReadersWhereUniqueInput
}

input _BooksToReadersUpsertWithWhereUniqueWithoutBookInput {
  create: _BooksToReadersCreateWithoutBookInput
  update: _BooksToReadersUpdateWithoutBookDataInput
  where: _BooksToReadersWhereUniqueInput
}

input _BooksToReadersUpsertWithWhereUniqueWithoutReaderInput {
  create: _BooksToReadersCreateWithoutReaderInput
  update: _BooksToReadersUpdateWithoutReaderDataInput
  where: _BooksToReadersWhereUniqueInput
}

input _BooksToReadersWhereInput {
  book: _BookWhereInput
  borrowDate: String
  id: String
  NOT: [_BooksToReadersWhereInput!]
  OR: [_BooksToReadersWhereInput!]
  reader: _ReaderWhereInput
  returnDate: String
  returned: Boolean
}

input _BooksToReadersWhereUniqueInput {
  id: String
}

input _BookUpdateInput {
  booksToAuthors: _BooksToAuthorsUpdateManyWithoutBookInput
  booksToReaders: _BooksToReadersUpdateManyWithoutBookInput
  chapters: Int
  description: String
  imgUri: String
  isbn: String
  pages: Int
  price: Float
  storage: _StorageUpdateOneRequiredWithoutBookInput
  title: String
}

input _BookUpdateOneWithoutBooksToAuthorsInput {
  connect: _BookWhereUniqueInput
  delete: Boolean
  disconnect: Boolean
  update: _BookUpdateWithoutBooksToAuthorsDataInput
  upsert: _BookUpsertWithoutBooksToAuthorsInput
}

input _BookUpdateOneWithoutBooksToReadersInput {
  connect: _BookWhereUniqueInput
  delete: Boolean
  disconnect: Boolean
  update: _BookUpdateWithoutBooksToReadersDataInput
  upsert: _BookUpsertWithoutBooksToReadersInput
}

input _BookUpdateWithoutBooksToAuthorsDataInput {
  booksToReaders: _BooksToReadersUpdateManyWithoutBookInput
  chapters: Int
  description: String
  imgUri: String
  isbn: String
  pages: Int
  price: Float
  storage: _StorageUpdateOneRequiredWithoutBookInput
  title: String
}

input _BookUpdateWithoutBooksToReadersDataInput {
  booksToAuthors: _BooksToAuthorsUpdateManyWithoutBookInput
  chapters: Int
  description: String
  imgUri: String
  isbn: String
  pages: Int
  price: Float
  storage: _StorageUpdateOneRequiredWithoutBookInput
  title: String
}

input _BookUpsertWithoutBooksToAuthorsInput {
  update: _BookUpdateWithoutBooksToAuthorsDataInput
}

input _BookUpsertWithoutBooksToReadersInput {
  update: _BookUpdateWithoutBooksToReadersDataInput
}

input _BookWhereInput {
  booksToAuthors: _BooksToAuthorsListRelationFilter
  booksToReaders: _BooksToReadersListRelationFilter
  chapters: Int
  description: String
  id: String
  imgUri: String
  isbn: String
  NOT: [_BookWhereInput!]
  OR: [_BookWhereInput!]
  pages: Int
  price: Float
  storage: _StorageWhereInput
  title: String
}

input _BookWhereUniqueInput {
  id: String
  isbn: String
}

input _ReaderCreateInput {
  address: String
  booksToReaders: _BooksToReadersCreateManyWithoutReaderInput
  email: String
  imgUri: String
  name: String
  phone: Int
}

input _ReaderCreateOneWithoutBooksToReadersInput {
  connect: _ReaderWhereUniqueInput
}

input _ReaderUpdateInput {
  address: String
  booksToReaders: _BooksToReadersUpdateManyWithoutReaderInput
  email: String
  imgUri: String
  name: String
  phone: Int
}

input _ReaderUpdateOneWithoutBooksToReadersInput {
  connect: _ReaderWhereUniqueInput
  delete: Boolean
  disconnect: Boolean
  update: _ReaderUpdateWithoutBooksToReadersDataInput
  upsert: _ReaderUpsertWithoutBooksToReadersInput
}

input _ReaderUpdateWithoutBooksToReadersDataInput {
  address: String
  email: String
  imgUri: String
  name: String
  phone: Int
}

input _ReaderUpsertWithoutBooksToReadersInput {
  update: _ReaderUpdateWithoutBooksToReadersDataInput
}

input _ReaderWhereInput {
  address: String
  booksToReaders: [_BooksToReadersListRelationFilter!]
  costumerId: String
  email: String
  id: String
  imgUri: String
  name: String
  NOT: [_ReaderWhereInput!]
  OR: [_ReaderWhereInput!]
  phone: Int
}

input _ReaderWhereUniqueInput {
  email: String
  id: String
}

input _StorageCreateOneWithoutBookInput {
  create: _StorageCreateWithoutBookInput
}

input _StorageCreateWithoutBookInput {
  borrowedQuantity: Int
  quantity: Int
}

input _StorageUpdateOneRequiredWithoutBookInput {
  create: _StorageCreateWithoutBookInput
  update: _StorageUpdateWithoutBookDataInput
  upsert: _StorageUpsertWithoutBookInput
}

input _StorageUpdateWithoutBookDataInput {
  borrowedQuantity: Int
  quantity: Int
}

input _StorageUpsertWithoutBookInput {
  create: _StorageCreateWithoutBookInput
  update: _StorageUpdateWithoutBookDataInput
}

input _StorageWhereInput {
  book: _BookWhereInput
  borrowedQuantity: Int
  id: String
  quantity: Int
}

type Author {
  about: String
  booksToAuthors: [BooksToAuthors!]!
  email: String!
  id: String!
  imgUri: String
  name: String!
}

type Book {
  available: Boolean!
  booksToAuthors: [BooksToAuthors!]!
  booksToReaders: [BooksToReaders!]!
  chapters: Int!
  description: String
  id: String!
  imgUri: String
  isbn: String!
  pages: Int!
  price: Float!
  storage: Storage
  title: String!
}

type BooksToAuthors {
  author: Author
  authorId: String
  book: Book
  bookId: String
  id: String!
}

input BooksToAuthorsCreateManyWithoutBookInput {
  create: [_BooksToAuthorsCreateWithoutBookInput!]
}

type BooksToReaders {
  book: Book
  bookId: String
  borrowDate: String!
  id: String!
  reader: Reader
  readerId: String
  remainingTime: String!
  returnDate: String!
  returned: Boolean!
}

type Mutation {
  createAuthor(data: _AuthorCreateInput): Author!
  createBook(data: _BookCreateInput): Book!
  createReader(data: _ReaderCreateInput): Reader!
  deleteAuthor(where: _AuthorWhereUniqueInput): Author!
  deleteBook(where: _BookWhereUniqueInput): Book!
  deleteBooksToReaders(where: _BooksToReadersWhereUniqueInput): BooksToReaders!
  deleteReader(where: _ReaderWhereUniqueInput): Reader!
  TODO(id: String): Book
  updateAuthor(data: _AuthorUpdateInput, where: _AuthorWhereUniqueInput): Author!
  updateBook(data: _BookUpdateInput, where: _BookWhereUniqueInput): Book!
  updateReader(data: _ReaderUpdateInput, where: _ReaderWhereUniqueInput): Reader!
}

type Query {
  getAuthorByEmail(email: String!): Author
  getAuthorByID(id: String!): Author
  getAuthors: [Author!]!
  getAuthorsBy(_authorArgs: _AuthorWhereInput): [Author!]!
  getBookByID(id: String!): Book
  getBookByISBN(isbn: String!): Book
  getBooks: [Book!]!
  getBooksBy(_bookArgs: _BookWhereInput): [Book!]!
  getBooksToAuthorsBy(_booksToAuthorsArgs: _BooksToAuthorsWhereInput): [BooksToAuthors!]!
  getBooksToAuthorsByID(id: String!): BooksToAuthors
  getBooksToReadersBy(_booksToReadersArgs: _BooksToReadersWhereInput): [BooksToReaders!]!
  getBooksToReadersByBorrowDate(borrowDate: String): [BooksToReaders!]!
  getBooksToReadersByID(id: String!): BooksToReaders
  getBooksToReadersByReturnDate(returnDate: String!): [BooksToReaders!]!
  getReaderByEmail(email: String!): Reader
  getReaderByID(id: String!): Reader
  getReaders: [Reader!]!
  getReadersBy(_readerArgs: _ReaderWhereInput): [Reader!]!
  getStorageBy(_storageArgs: _StorageWhereInput): [Storage!]!
  getStorageByID(id: String!): Storage
  getStorageByQuantity(borrowedQuantity: Int): [Storage!]!
  q: [Reader!]!
}

type Reader {
  address: String
  booksToReaders: [BooksToReaders!]!
  costumerId: String!
  email: String!
  id: String!
  imgUri: String
  name: String!
  phone: Int
}

type Storage {
  book: Book
  borrowedQuantity: Int
  id: String!
  quantity: Int!
}
